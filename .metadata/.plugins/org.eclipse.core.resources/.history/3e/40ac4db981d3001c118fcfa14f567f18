/*
 * Pasajero.c
 *
 *  Created on: 11 may 2022
 *      Author: Compumar
 */

#include "pasajero.h"
#include "Input.h"

void Mostrar(ePasajero Listado, int tam){
char auxiliar[50];

for(int i =0; i<tam;i++){
    if(Listado.isEmpty == 0)
    	 {
    switch(Listado[i].typePassenger)
         {
         case BEBE:
    	 strcpy(auxiliar, "BEBE");
    	 break;
    	 case MENOR:
    	 strcpy(auxiliar, "MENOR");
    	 break;
    	 case ADULTO:
    	 strcpy(auxiliar, "ADULTO");
    	 break;
    	 }
    	 switch(Listado[i].statusFligth)
         	 {
         	 case ACTIVO:
         	 printf("\n%d %10s %17s %15.2f %12d %10s %10d ", Listado.id, Listado.name,Listado.lastName, Listado.price, auxiliar, Listado.flyCode, "Activo");
         	 break;
         	 case ATERRIZADO:
         	 printf("\n%d %10s %17s %15.2f %12d %10s %10d ", Listado.id, Listado.name,Listado.lastName, Listado.price, auxiliar, Listado.flyCode, "Aterrizado");
         	 break;
         	 }
        }
	}
}

void InicializarListaPasajero(ePasajero lista[], int tam)
{

    if(lista != NULL && tam > 0)
    {

    for(int i = 0;i < tam; i++)
        {
        lista[i].isEmpty = 1; // se inicializan el array con el campo Isempty en 1 = vacio

        }
    }
}

int IngresarPasajro(ePasajero* Listado, int tam, int id, char name[], char lastName[], float price, int typePassenger, char flyCode[], int statusFligth){

    int retorno=-1;

    int index = BuscarPrimerEspacioLibre(Listado, tam);
    if(index != -1)
	   {

	    Listado[index].id=incrementarId(2000);
        getString(Listado[index].name,"Ingrese nombre: ",51);
        getString(Listado[index].lastName,"Ingrese apellido: ", 51);
        Listado[index].price=flotanteValidado("Ingrese precio: ", "El precio debe ser mayor a 0", 1, 999999);
        Listado[index].typePassenger = enteroValidado("Ingresar tipo de pasajero: ","Error!!! \nEl pasajero puede ser 1=BEBE 2=MENOR 3=ADULTO: ", 1 , 3);
        getString(Listado[index].flyCode,"Ingrese codigo: ", 10);
        Listado[index].statusFligth = enteroValidado("Estado de vuelo: ","Error!!! \nEl estado puede ser 1=ACTIVO 2=ATERRIZADO: ", 1 , 2);
        Listado[index].isEmpty=0;
        retorno =0;
	   }
    return retorno;

}

int BuscarPrimerEspacioLibre(ePasajero lista[], int tam){
	int i;
	int index;

	index = -1;
	for(i = 0; i<tam; i++){
		if(lista[i].isEmpty == 1)
		{
			index = i;
			break;
		}

	}
	if(index == -1){
		printf("La lista esta ocupada\n");
	}
	return index;
}

void MostrarListado(ePasajero lista[], int tam)
{
	int flagListaVacia = 0;
	printf("Id\tNombre\t\tApellido\tPrecio\t\tTipo\tCodigo\t\tEstado\n");
	for (int i = 0; i < tam; i++)
	{
		if(lista[i].isEmpty == 0)
		{
			Mostrar(lista, tam);
			flagListaVacia = 1;
		}
	}
		if(flagListaVacia == 0)
		{
		puts("Lista vacia.\n");
		}
}

int darDeBaja(ePasajero lista[], int tam){
	int i;
	int auxPasajero = 0;
	int idPasajeroSelccionado;
	printf("++++++++++++++++++++++++ LISTADO ID PASAJEROS ++++++++++++++++++++++++\n");
    MostrarListado(lista, tam);
	idPasajeroSelccionado = IngresarEntero("\nIngrese el Id del pasajero a borrar: ");

	for(i=0; i<tam; i++)
	{
	    if(lista[i].isEmpty==0 &&lista[i].id==idPasajeroSelccionado)
	    {
	        lista[i].isEmpty=1;
	        auxPasajero=1;
	        printf("ID %d dado de baja", idPasajeroSelccionado);
	        break;
	    }
	}
	if(auxPasajero == 0)
    {
        printf("\nEl ID ingresado no existe");
    }

	return auxPasajero;
}

int modificarPasajero(ePasajero lista[], int tam)
{
    int i;
    int pasajeroAModificar;
    float precioAcambiar;
    int tipoACambiar;
    char nombreACambiar[51];
    char apellidoACambiar[51];
    char codigoACambiar[10];
    int retorno;
    int opcionMenu;
    int contador=0;
    retorno = 0;
    printf("++++++++++++++++++++++++ LISTADO ID PASAJEROS ++++++++++++++++++++++++\n");
    MostrarListado(lista, tam);
    pasajeroAModificar = IngresarEntero("\nIngrese el ID del pasajero a modificar: ");

    for(i=0;i<tam;i++)
    {
        if(lista[i].isEmpty==0 && lista[i].id==pasajeroAModificar)
        {
            do{


            printf("\n1. Modificar Nombre\n");
            printf("2. Modificar Apellido\n");
            printf("3. Modificar Precio\n");
            printf("4. Modificar Tipo de Pasajero\n");
            printf("5. Modificar Codigo de vuelo \n");
            printf("6. Volver al menu\n");
            opcionMenu=enteroValidado("Seleccione opcion: ", "Se puede seleccionar del 1 al 6 ",1,6);

            switch(opcionMenu){
                case 1:
                    getString(nombreACambiar,"Ingrese nuevo nombre: ",51);
                    strcpy(lista[i].name,nombreACambiar);
                    retorno = 1;
                    printf("ID %d modificado ", pasajeroAModificar);
                    contador++;
                    break;
                case 2:
                    getString(apellidoACambiar,"Ingrese nuevo apellido: ",51);
                    strcpy(lista[i].lastName,apellidoACambiar);
                    retorno = 1;
                    printf("ID %d modificado ", pasajeroAModificar);
                    contador++;
                    break;
                case 3:
                    precioAcambiar= flotanteValidado("\nIngrese nuevo precio: ", "El precio debe ser mayor a 0", 1, 999999);
                    lista[i].price = precioAcambiar;
                    retorno = 1;
                    printf("ID %d modificado ", pasajeroAModificar);
                    contador++;
                    break;
                case 4:
                    tipoACambiar= enteroValidado("Ingresar nuevo tipo de pasajero: ","Error!!! \nEl pasajero puede ser 1=BEBE 2=MENOR 3=ADULTO: ", 1 , 3);
                    lista[i].typePassenger = tipoACambiar;
                    retorno = 1;
                    printf("ID %d modificado ", pasajeroAModificar);
                    contador++;
                    break;
                case 5:
                    getString(codigoACambiar,"Ingrese nuevo codigo: ",10);
                    strcpy(lista[i].flyCode,codigoACambiar);
                    retorno = 1;
                    printf("ID %d modificado ", pasajeroAModificar);
                    contador++;
                    break;
                case 6:
                    printf("Volviste al menu\n");
                    retorno = 1;
                    contador++;
                    break;
            }
            }while(contador != 1);

        }

    }
    if(retorno == 0)
    {
        printf("\nEl ID ingresado no existe");
    }
   return retorno;
}
int buscarIndexPorId(ePasajero pArray[], int len, int id)
{
	int retorno = -1;
	if (pArray != NULL && len > 0 && id > 0)
	{
		for (int i = 0; i < len; i++)
		{
			if (pArray[i].id == id && pArray[i].isEmpty == 0)
			{
				retorno = i;
				break;
			}
		}
	}
	return retorno;
}
int incrementarId(int valor)
{
    static int id;
    static int flagValorInicial=0;
    if(flagValorInicial ==0){
        id=valor;
        flagValorInicial=1;
    }
    id++;
    return id;
}

int validar(int valorUno, int valorDos, int valor, char msjError[])
{
    int valorAux;
    while(valor <= valorUno || valor >= valorDos){
        printf("Error!!!! %s", msjError);
        valorAux=IngresarEntero("Ingrese nuevamente: ");
        valor = valorAux;
        printf("\n valor aux: %d",valorAux );
        printf("\n valor : %d",valor );

    }
     return valorAux;
}

void OrdenarListadoPorApellidoYTipo(ePasajero lista[], int tam, int orden)
{
	ePasajero auxApellidoPasajero;
	ePasajero auxTipo;

	if(orden == 1){
	for(int i=0; i<tam-1; i++)
	{
		for(int j=i+1; j<tam; j++)
		{
			if(strcmp(lista[i].lastName, lista[j].lastName)>0)
			{
				auxApellidoPasajero = lista[i];
				lista[i] = lista[j];
				lista[j] = auxApellidoPasajero;

			 }
		}

		for(int i=0; i<tam-1; i++)
	{
		for(int j=i+1; j<tam; j++)
		{
			if( strcmp(lista[i].lastName, lista[j].lastName)==0 && lista[i].typePassenger > lista[j].typePassenger)
			{
				auxTipo = lista[i];
				lista[i] = lista[j];
				lista[j] = auxTipo;

			 }
		}
	}
	}
	}
	if(orden == 0){
	for(int i=0; i<tam-1; i++)
	{
		for(int j=i+1; j<tam; j++)
		{
			if(strcmp(lista[i].lastName, lista[j].lastName)<0)
			{
				auxApellidoPasajero = lista[i];
				lista[i] = lista[j];
				lista[j] = auxApellidoPasajero;

			 }
		}

		for(int i=0; i<tam-1; i++)
	{
		for(int j=i+1; j<tam; j++)
		{
			if( strcmp(lista[i].lastName, lista[j].lastName)==0 && lista[i].typePassenger < lista[j].typePassenger)
			{
				auxTipo = lista[i];
				lista[i] = lista[j];
				lista[j] = auxTipo;

			 }
		}
	}
	}
	}

	printf("\n+++++++++++++++++  Ordenado por Apellido y tipo  +++++++++++++++++++\n");
    MostrarListado(lista, tam);
}

//Total y promedio de los precios de los pasajes, y cuántos pasajeros superan el precio promedio.

void CalculosPasajes(ePasajero lista[], int tam)
{
	int contadorPasajero=0;
	float total=0;
	float promedio;
	int pasajerosQueSuperanPromedio=0;
	for(int i=0; i<tam; i++)
	{
			if(lista[i].isEmpty == 0)
			{
				contadorPasajero++;
				total=total + lista[i].price;
			 }
	}
	promedio = total / contadorPasajero;
	for(int i=0; i<tam; i++)
	{
			if(lista[i].isEmpty == 0 && lista[i].price > promedio)
			{
				pasajerosQueSuperanPromedio++;

			 }
	}
	printf("\n+++++++++ Se muestra el precio total , promedio por pasaje y pasajeros por encima del promedio+++++++++++\n");
	printf("\nEl precio promedio por pasaje es: $ %.2f", promedio);
	printf("\nEl precio total de todos los pasajes es: $ %.2f", total);
	printf("\nCantidad de pasajeros que superan el precio del pasaje promedio: %d", pasajerosQueSuperanPromedio);
}

// 3. Listado de los pasajeros por Código de vuelo y estados de vuelos ‘ACTIVO’

void OrdenarPorCodigoYEstado(ePasajero lista[], int tam, int orden)
{
	ePasajero auxCodigo;
	ePasajero auxEstado;

	if(orden == 1){
	for(int i=0; i<tam-1; i++)
	{
		for(int j=i+1; j<tam; j++)
		{
			if(strcmp(lista[i].flyCode, lista[j].flyCode)>0)
			{
				auxCodigo = lista[i];
				lista[i] = lista[j];
				lista[j] = auxCodigo;

			 }
		}

		for(int i=0; i<tam-1; i++)
	{
		for(int j=i+1; j<tam; j++)
		{
			if( strcmp(lista[i].flyCode, lista[j].flyCode)==0 && lista[i].statusFligth > lista[j].statusFligth)
			{
				auxEstado = lista[i];
				lista[i] = lista[j];
				lista[j] = auxEstado;

			 }
		}
	}
	}
	}
	if(orden == 0){
	for(int i=0; i<tam-1; i++)
	{
		for(int j=i+1; j<tam; j++)
		{
			if(strcmp(lista[i].flyCode, lista[j].flyCode)<0)
			{
				auxCodigo = lista[i];
				lista[i] = lista[j];
				lista[j] = auxCodigo;

			 }
		}

		for(int i=0; i<tam-1; i++)
	{
		for(int j=i+1; j<tam; j++)
		{
			if( strcmp(lista[i].flyCode, lista[j].flyCode)==0 && lista[i].statusFligth < lista[j].statusFligth)
			{
				auxEstado = lista[i];
				lista[i] = lista[j];
				lista[j] = auxEstado;

			 }
		}
	}
	}
	}

	printf("\n+++++++++++++++++  Ordenado por Codigo y estado  +++++++++++++++++++\n");
        MostrarListado(lista,tam);
}
